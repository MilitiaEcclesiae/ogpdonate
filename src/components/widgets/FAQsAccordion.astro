---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Faqs as FaqsType } from '~/types'; // Rename imported type to avoid conflict

// Define local props interface
export interface ComponentProps extends FaqsType {
  titleClass?: string;
  subtitleClass?: string;
  titleTextSize?: string;
  titleTextColor?: string;
  subtitleTextSize?: string;
  subtitleTextColor?: string;
  itemTextSize?: string;
  itemTextColor?: string;
  itemHoverTextColor?: string;
  contentTextSize?: string;
  contentTextColor?: string;
}

const {
  title = '',
  subtitle = '',
  tagline = '',
  items = [],
  id,
  titleClass,
  subtitleClass,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
  // Title and Subtitle Customization
  titleTextSize = 'text-2xl sm:text-3xl', // Responsive text size
  titleTextColor = 'text-gray-900',
  subtitleTextSize = 'text-lg sm:text-xl', // Responsive text size
  subtitleTextColor = 'text-gray-600',
  // FAQ Item Customization
  itemTextSize = 'text-base',
  itemTextColor = 'text-gray-900',
  itemHoverTextColor = 'hover:text-purple-500', // Use Tailwind's hover utility
  contentTextSize = 'text-sm',
  contentTextColor = 'text-silver-700',
} = Astro.props as ComponentProps; // Cast props to the extended type
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 ${classes?.container ?? ''}`} bg={bg}>
  <!-- Headline with Customizable Styles -->
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    titleClass={`${titleTextSize} ${titleTextColor}`}
    subtitleClass={`${subtitleTextSize} ${subtitleTextColor}`}
  />

  <!-- FAQ Items with Customizable Styles -->
  <div class="grid grid-cols-1 gap-4 sm:gap-6">
    {items.map((item, index) => (
      <div class="group relative rounded-md border border-silver-900">
        <button
          class={`flex w-full flex-1 items-center justify-between gap-2 p-3 text-left font-medium transition ${itemHoverTextColor} sm:px-4 ${itemTextSize} ${itemTextColor}`}
          type="button"
          aria-expanded="false"
          aria-controls={`item-content-${index}`}
          data-index={index}
        >
          {item.title}
          <span class="h-7 w-7 shrink-0 transition-transform">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="m9 18 6-6-6-6" />
            </svg>
          </span>
        </button>

        <div
          id={`item-content-${index}`}
          class="hidden max-h-0 overflow-hidden px-3 transition-all duration-300 ease-in-out sm:px-4"
        >
          <p class={`prose mb-4 mt-1 max-w-full transition-[height] ${contentTextSize} ${contentTextColor}`}>
            {item.details} 
          </p>
        </div>
      </div>
    ))}
  </div>
</WidgetWrapper>

<script>
  function toggleItem(event) {
    const button = event.currentTarget;
    const item = button.closest('.group');

    // Null check for item
    if (!item) return;

    const content = item.querySelector('div');
    const chevron = item.querySelector('span');

    // Null checks for content and chevron
    if (!content || !chevron) return;

    const isOpen = content.classList.toggle('hidden');
    button.setAttribute('aria-expanded', !isOpen);
    content.style.maxHeight = isOpen ? '0px' : `${content.scrollHeight}px`;
    chevron.classList.toggle('rotate-180', !isOpen);

    // Close other open items in the same column (optional)
    document.querySelectorAll('.group').forEach((otherItem) => {
      const otherContent = otherItem.querySelector('div');
      const otherChevron = otherItem.querySelector('span');
      const otherButton = otherItem.querySelector('button');

      // Null checks for otherContent, otherChevron, and otherButton
      if (otherItem !== item && otherContent && otherChevron && otherButton && !otherContent.classList.contains('hidden')) {
        otherContent.classList.add('hidden');
        otherContent.style.maxHeight = '0px';
        otherChevron.classList.remove('rotate-180');
        otherButton.setAttribute('aria-expanded', 'false');
      }
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.group button').forEach((button) => {
      button.addEventListener('click', toggleItem);
    });
  });
</script>

<style>
  .hidden {
    display: none;
  }

  .rotate-180 {
    transform: rotate(180deg);
  }

  div[class*="max-h-0"] {
    transition: max-height 0.3s ease-in-out;
  }

  /* Mobile-specific styles */
  @media (max-width: 640px) {
    .group button {
      padding: 0.75rem; /* Smaller padding for mobile */
    }

    .group div {
      padding-left: 0.75rem; /* Smaller padding for mobile */
      padding-right: 0.75rem;
    }

    .prose {
      font-size: 0.875rem; /* Smaller font size for mobile */
    }
  }
</style>