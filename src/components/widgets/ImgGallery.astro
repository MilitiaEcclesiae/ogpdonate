---
// Define the props for the component
export interface Img {
  image: string;
}

// Define the props interface
export interface Props {
  imgs: Img[];
  backgroundSize?: string; // Optional prop for background size
}

// Destructure the props
const { imgs, backgroundSize = 'cover' } = Astro.props;
---

<div class="img-gallery">
  <div class="img-carousel">
    {imgs.map((img, index) => (
      <div
        class="img-slide"
        aria-hidden={index !== 0}
        role="img"
        aria-label={`Image ${index + 1}`}
        style={`background-image: url(${img.image}); background-size: ${backgroundSize};`}
      ></div>
    ))}
  </div>
</div>

<style>
  .img-gallery {
    position: relative;
    width: 85%;
    margin: 0 auto;
    overflow: hidden;
    border-radius: 10px;
  }

  .img-carousel {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }

  .img-slide {
    flex: 0 0 100%;
    height: 350px;
    background-position: center;
    background-repeat: no-repeat;
    display: none;
  }

  .img-slide[aria-hidden="false"] {
    display: block;
  }
</style>

<script>
  // Carousel logic
  let currentIndex = 0;
  let intervalId;

  // Function to update the active slide
  const updateCarousel = () => {
    const slides = document.querySelectorAll('.img-slide');
    slides.forEach((slide, index) => {
      slide.setAttribute('aria-hidden', (index !== currentIndex).toString());
    });
  };

  // Function to move to the next slide
  const nextSlide = () => {
    const slides = document.querySelectorAll('.img-slide');
    slides[currentIndex].setAttribute('aria-hidden', 'true'); // Set as string
    currentIndex = (currentIndex + 1) % slides.length;
    slides[currentIndex].setAttribute('aria-hidden', 'false'); // Set as string
  };

  // Function to start the auto-cycle
  const startAutoCycle = () => {
    intervalId = setInterval(nextSlide, 3500);
  };

  // Function to stop the auto-cycle
  const stopAutoCycle = () => {
    clearInterval(intervalId);
  };

  // Initialize the carousel
  const initCarousel = () => {
    updateCarousel();
    startAutoCycle();

    const carouselContainer = document.querySelector('.img-gallery');
    if (carouselContainer) {
      carouselContainer.addEventListener('mouseenter', stopAutoCycle);
      carouselContainer.addEventListener('mouseleave', startAutoCycle);
    }
  };

  // Cleanup event listeners and interval on component unmount
  const cleanupCarousel = () => {
    clearInterval(intervalId);
    const carouselContainer = document.querySelector('.img-gallery');
    if (carouselContainer) {
      carouselContainer.removeEventListener('mouseenter', stopAutoCycle);
      carouselContainer.removeEventListener('mouseleave', startAutoCycle);
    }
  };

  document.addEventListener('DOMContentLoaded', initCarousel);
  document.addEventListener('astro:beforeunload', cleanupCarousel);
</script>