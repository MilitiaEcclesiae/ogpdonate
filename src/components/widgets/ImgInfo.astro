---
// Define the props for the component
export interface ImageData {
  src: string; // Image source
  title: string; // Title for the overlay
  popupContent?: string; // Content to show in the popup dialog
}

// Define the props interface
export interface Props {
  imageList: ImageData[]; // List of images
  backgroundSize?: string; // Optional prop for background size
}

// Destructure the props
const { imageList, backgroundSize = 'cover' } = Astro.props;
---

<div class="image-gallery">
  <div class="image-carousel">
    {imageList.map((item, index) => (
      <div
        class="image-slide"
        aria-hidden={index !== 0}
        role="img"
        aria-label={`Image ${index + 1}`}
        style={`background-image: url(${item.src}); background-size: ${backgroundSize};`}
        data-content={item.popupContent || `More info about: ${item.title}`}
      >
        <!-- Overlay Title -->
        <div class="overlay-title">
          {item.title}
        </div>
      </div>
    ))}
  </div>

  <!-- Popup Modal -->
  <div id="popup-modal" class="popup-modal">
    <div class="popup-content">
      <span id="close-popup" class="close-popup">&times;</span>
      <p id="popup-text"></p>
    </div>
  </div>
</div>

<style>
  .image-gallery {
    position: relative;
    width: 85%;
    margin: 0 auto;
    overflow: hidden;
    border-radius: 10px;
  }

  .image-carousel {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }

  .image-slide {
    flex: 0 0 100%;
    height: 500px;
    background-position: center;
    background-repeat: no-repeat;
    display: none;
    position: relative;
    cursor: pointer; /* Add pointer cursor to indicate clickability */
  }

  .image-slide[aria-hidden="false"] {
    display: block;
  }

  /* Overlay Title Styles */
  .overlay-title {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 5rem;
    font-weight: bold;
    text-align: center;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }

  /* Popup Modal Styles */
  .popup-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .popup-content {
    background-color: #b2161e;
    padding: 20px;
    border-radius: 8px;
    max-width: 500px;
    width: 90%;
    text-align: center;
    color: white;
    font-weight: bold;
    font-size: 1.5rem;
    position: relative;
  }

  .close-popup {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 24px;
    cursor: pointer;
  }

  .close-popup:hover {
    color: #555;
  }
</style>

<script>
  // Carousel logic
  let currentSlideIndex = 0;
  let autoCycleTimer;

  // Function to update the active slide
  const updateCarousel = () => {
    const slides = document.querySelectorAll('.image-slide');
    slides.forEach((slide, index) => {
      slide.setAttribute('aria-hidden', (index !== currentSlideIndex).toString());
    });
  };

  // Function to move to the next slide
  const nextSlide = () => {
    const slides = document.querySelectorAll('.image-slide');
    slides[currentSlideIndex].setAttribute('aria-hidden', 'true');
    currentSlideIndex = (currentSlideIndex + 1) % slides.length;
    slides[currentSlideIndex].setAttribute('aria-hidden', 'false');
  };

  // Function to start the auto-cycle
  const startAutoCycle = () => {
    autoCycleTimer = setInterval(nextSlide, 3500);
  };

  // Function to stop the auto-cycle
  const stopAutoCycle = () => {
    clearInterval(autoCycleTimer);
  };

  // Function to handle image click
  const handleImageClick = (event) => {
    const target = event.currentTarget;
    const content = target.getAttribute('data-content');
    if (content) {
      // Display the content in the popup modal
      const popupModal = document.getElementById('popup-modal');
      const popupText = document.getElementById('popup-text');
      if (popupModal && popupText) {
        popupText.textContent = content;
        popupModal.style.display = 'flex';
      }
    }
  };

  // Function to close the popup modal
  const closePopup = () => {
    const popupModal = document.getElementById('popup-modal');
    if (popupModal) {
      popupModal.style.display = 'none';
    }
  };

  // Initialize the carousel
  const initCarousel = () => {
    updateCarousel();
    startAutoCycle();

    // Add click event listeners to all slides
    const slides = document.querySelectorAll('.image-slide');
    slides.forEach((slide) => {
      slide.addEventListener('click', handleImageClick);
    });

    // Add click event listener to close the popup modal
    const closeButton = document.getElementById('close-popup');
    if (closeButton) {
      closeButton.addEventListener('click', closePopup);
    }

    // Pause auto-cycle on hover
    const carouselContainer = document.querySelector('.image-gallery');
    if (carouselContainer) {
      carouselContainer.addEventListener('mouseenter', stopAutoCycle);
      carouselContainer.addEventListener('mouseleave', startAutoCycle);
    }
  };

  // Cleanup event listeners and interval on component unmount
  const cleanupCarousel = () => {
    clearInterval(autoCycleTimer);

    // Remove click event listeners from all slides
    const slides = document.querySelectorAll('.image-slide');
    slides.forEach((slide) => {
      slide.removeEventListener('click', handleImageClick);
    });

    // Remove hover event listeners
    const carouselContainer = document.querySelector('.image-gallery');
    if (carouselContainer) {
      carouselContainer.removeEventListener('mouseenter', stopAutoCycle);
      carouselContainer.removeEventListener('mouseleave', startAutoCycle);
    }
  };

  document.addEventListener('DOMContentLoaded', initCarousel);
  document.addEventListener('astro:beforeunload', cleanupCarousel);
</script>